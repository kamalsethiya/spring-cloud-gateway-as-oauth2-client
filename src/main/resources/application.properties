server.port=8087
debug=true

#default value is true for management.endpoint.gateway.enabled
#using /actuator/gateway/routes/ we can fetch all the routes. Similarly we can add and delete routes dynamically.
# read this: https://cloud.spring.io/spring-cloud-gateway/multi/multi__actuator_api.html#:~:text=The%20%2Fgateway%20actuator%20endpoint%20allows,properties.
management.endpoint.gateway.enabled=true 
#Note: management.endpoints.web.exposure.include=gateway only enables REST api to GET, POST and DELETE routes and filters etc
#management.endpoints.web.exposure.include=gateway
#health endpoint : http://localhost:8087/actuator/health
management.endpoints.web.exposure.include=*

spring.application.name=api-gateway-oauth-client

spring.security.oauth2.client.registration.mywebclient.client-id = photo-app-webclient
spring.security.oauth2.client.registration.mywebclient.client-secret = 1117ecfb-c445-46a6-950c-cfc2bfa1ffe1
spring.security.oauth2.client.registration.mywebclient.scope = openid, profile, roles
spring.security.oauth2.client.registration.mywebclient.authorization-grant-type = authorization_code
spring.security.oauth2.client.registration.mywebclient.redirect-uri = http://localhost:8087/login/oauth2/code/mywebclient
#spring.security.oauth2.client.registration.mywebclient.redirect-uri = http://api.manage.local/login/oauth2/code/mywebclient

spring.security.oauth2.client.provider.mywebclient.authorization-uri = http://localhost:8080/auth/realms/appsdeveloperblog/protocol/openid-connect/auth
spring.security.oauth2.client.provider.mywebclient.token-uri = http://localhost:8080/auth/realms/appsdeveloperblog/protocol/openid-connect/token
spring.security.oauth2.client.provider.mywebclient.jwk-set-uri=http://localhost:8080/auth/realms/appsdeveloperblog/protocol/openid-connect/certs
spring.security.oauth2.client.provider.mywebclient.user-info-uri = http://localhost:8080/auth/realms/appsdeveloperblog/protocol/openid-connect/userinfo
spring.security.oauth2.client.provider.mywebclient.user-name-attribute = preferred_username

spring.redis.host=127.0.0.1
#spring.redis.password= # Login password of the redis server.
spring.redis.port=6379

spring.session.store-type=redis


eureka.client.service-url.defaultZone = http://localhost:8010/eureka

#passing the authorization header to upstream service is important hence adding TokenRelay as a default filter
#if we want all routes to start an authorization flow, we can add the TokenRelay filter to the default-filters section as below 
# or we can add TokenRelay filter to individual routes based on authentication is needed or not. For ex: for health endpoint auth is not needed etc
spring.cloud.gateway.default-filters[0] = TokenRelay


#IMP: There is no need to define apis defined in the gateway itself ex: /whoami in this case and routing to index.html page

spring.cloud.gateway.routes[0].id = users-status-check
spring.cloud.gateway.routes[0].uri = lb://demo-resource-server
spring.cloud.gateway.routes[0].predicates[0]=Path=/users/status/check
spring.cloud.gateway.routes[0].predicates[1]=Method=GET
spring.cloud.gateway.routes[0].filters[0]=RemoveRequestHeader=Cookie

spring.cloud.gateway.routes[1].id = albums
spring.cloud.gateway.routes[1].uri = lb://albums-resource-server
spring.cloud.gateway.routes[1].predicates[0]=Path=/albums
spring.cloud.gateway.routes[1].predicates[1]=Method=GET
spring.cloud.gateway.routes[1].filters[0]=RemoveRequestHeader=Cookie
#spring.cloud.gateway.routes[1].filters[1]=TokenRelay

spring.cloud.gateway.routes[2].id = photos
spring.cloud.gateway.routes[2].uri = lb://photos-resource-server
spring.cloud.gateway.routes[2].predicates[0]=Path=/photos
spring.cloud.gateway.routes[2].predicates[1]=Method=GET
spring.cloud.gateway.routes[2].filters[0]=RemoveRequestHeader=Cookie
#spring.cloud.gateway.routes[2].filters[1]=TokenRelay

spring.cloud.gateway.routes[3].id = users-status-check-unprotected
spring.cloud.gateway.routes[3].uri = lb://demo-resource-server
spring.cloud.gateway.routes[3].predicates[0]=Path=/users/status/check/unprotected
spring.cloud.gateway.routes[3].predicates[1]=Method=GET
spring.cloud.gateway.routes[3].filters[0]=RemoveRequestHeader=Cookie

#spring.cloud.gateway.routes[4].id = spa-index-rest-call
#spring.cloud.gateway.routes[4].uri = http://ui.manage.local/index-cookie-domain.html
#spring.cloud.gateway.routes[4].predicates[0]=Path=/index-cookie-domain
#spring.cloud.gateway.routes[4].predicates[1]=Method=GET
#spring.cloud.gateway.routes[4].filters[0]=RedirectTo=302, http://ui.manage.local/index-cookie-domain.html


spring.cloud.gateway.routes[4].id = spa-index-rest-call
spring.cloud.gateway.routes[4].uri = http://localhost:8181/index-cookie-localhost.html
spring.cloud.gateway.routes[4].predicates[0]=Path=/index-cookie-localhost
spring.cloud.gateway.routes[4].predicates[1]=Method=GET
spring.cloud.gateway.routes[4].filters[0]=RedirectTo=302, http://localhost:8181/index-cookie-localhost.html


spring.cloud.gateway.globalcors.add-to-simple-url-handler-mapping=true


#spring.security.oauth2.client.registration.apigatewayclient.client-id = api-gateway-client
#spring.security.oauth2.client.registration.apigatewayclient.client-secret = 23c2b1cc-c40f-463a-a11c-e1e62400b1cd
#spring.security.oauth2.client.registration.apigatewayclient.scope = openid, profile, roles
#spring.security.oauth2.client.registration.apigatewayclient.authorization-grant-type = authorization_code
#spring.security.oauth2.client.registration.apigatewayclient.redirect-uri = http://localhost:8082/login/oauth2/code/apigatewayclient
#
#spring.security.oauth2.client.provider.apigatewayclient.authorization-uri = http://localhost:8080/auth/realms/appsdeveloperblog/protocol/openid-connect/auth
#spring.security.oauth2.client.provider.apigatewayclient.token-uri = http://localhost:8080/auth/realms/appsdeveloperblog/protocol/openid-connect/token
#spring.security.oauth2.client.provider.apigatewayclient.jwk-set-uri=http://localhost:8080/auth/realms/appsdeveloperblog/protocol/openid-connect/certs
#spring.security.oauth2.client.provider.apigatewayclient.user-info-uri = http://localhost:8080/auth/realms/appsdeveloperblog/protocol/openid-connect/userinfo
#spring.security.oauth2.client.provider.apigatewayclient.user-name-attribute = preferred_username